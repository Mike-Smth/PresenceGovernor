/**
 * generated by Xtext 2.14.0
 */
package com.minres.rdl.formatting2;

import com.minres.rdl.rdl.ComponentDefinition;
import com.minres.rdl.rdl.EnumDefinition;
import com.minres.rdl.rdl.Include;
import com.minres.rdl.rdl.Instantiation;
import com.minres.rdl.rdl.PropertyAssignment;
import com.minres.rdl.rdl.PropertyDefault;
import com.minres.rdl.rdl.PropertyDefinition;
import com.minres.rdl.rdl.PropertyUsage;
import com.minres.rdl.rdl.Root;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class RDLFormatter extends AbstractFormatter2 {
  protected void _format(final Root root, @Extension final IFormattableDocument document) {
    EList<Include> _includes = root.getIncludes();
    for (final Include include : _includes) {
      document.<Include>format(include);
    }
    EList<ComponentDefinition> _componentDefinitions = root.getComponentDefinitions();
    for (final ComponentDefinition componentDefinition : _componentDefinitions) {
      document.<ComponentDefinition>format(componentDefinition);
    }
    EList<EnumDefinition> _enumDefinitions = root.getEnumDefinitions();
    for (final EnumDefinition enumDefinition : _enumDefinitions) {
      document.<EnumDefinition>format(enumDefinition);
    }
    EList<Instantiation> _instantiations = root.getInstantiations();
    for (final Instantiation instantiation : _instantiations) {
      document.<Instantiation>format(instantiation);
    }
    EList<PropertyAssignment> _propertyAssignments = root.getPropertyAssignments();
    for (final PropertyAssignment propertyAssignment : _propertyAssignments) {
      document.<PropertyAssignment>format(propertyAssignment);
    }
    EList<PropertyDefinition> _propertyDefinitions = root.getPropertyDefinitions();
    for (final PropertyDefinition propertyDefinition : _propertyDefinitions) {
      document.<PropertyDefinition>format(propertyDefinition);
    }
  }
  
  protected void _format(final PropertyDefinition propertyDefinition, @Extension final IFormattableDocument document) {
    document.<PropertyUsage>format(propertyDefinition.getUsage());
    document.<PropertyDefault>format(propertyDefinition.getDefault());
  }
  
  public void format(final Object propertyDefinition, final IFormattableDocument document) {
    if (propertyDefinition instanceof XtextResource) {
      _format((XtextResource)propertyDefinition, document);
      return;
    } else if (propertyDefinition instanceof PropertyDefinition) {
      _format((PropertyDefinition)propertyDefinition, document);
      return;
    } else if (propertyDefinition instanceof Root) {
      _format((Root)propertyDefinition, document);
      return;
    } else if (propertyDefinition instanceof EObject) {
      _format((EObject)propertyDefinition, document);
      return;
    } else if (propertyDefinition == null) {
      _format((Void)null, document);
      return;
    } else if (propertyDefinition != null) {
      _format(propertyDefinition, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(propertyDefinition, document).toString());
    }
  }
}
